from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.fernet import Fernet
import base64

# 1. Generate RSA Key Pairs (for 2 users)
def generate_keys():
    private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
    public_key = private_key.public_key()
    return private_key, public_key

# 2. Encrypt a message
def encrypt_message(message, receiver_public_key):
    # Generate symmetric key
    symmetric_key = Fernet.generate_key()
    f = Fernet(symmetric_key)

    encrypted_message = f.encrypt(message.encode())

    # Encrypt symmetric key with receiver's public RSA key
    encrypted_symmetric_key = receiver_public_key.encrypt(
        symmetric_key,
        padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None)
    )

    return encrypted_message, encrypted_symmetric_key

# 3. Decrypt the message
def decrypt_message(encrypted_message, encrypted_symmetric_key, receiver_private_key):
    # Decrypt symmetric key with private RSA key
    symmetric_key = receiver_private_key.decrypt(
        encrypted_symmetric_key,
        padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None)
    )

    f = Fernet(symmetric_key)
    decrypted_message = f.decrypt(encrypted_message).decode()
    return decrypted_message

# Example Usage
if __name__ == "__main__":
    # Alice and Bob generate their key pairs
    alice_private, alice_public = generate_keys()
    bob_private, bob_public = generate_keys()

    # Alice sends a message to Bob
    message = "Hey Bob! This is a secret message. ðŸ”’"
    encrypted_msg, encrypted_key = encrypt_message(message, bob_public)

    print("Encrypted message:", encrypted_msg)
    print("Encrypted symmetric key:", base64.b64encode(encrypted_key))

    # Bob receives and decrypts
    decrypted_msg = decrypt_message(encrypted_msg, encrypted_key, bob_private)
    print("Decrypted message:", decrypted_msg)
